name: Deploy with Helm

on:
  push:
    branches:
      - "**"
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  code-linting:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.4.1'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run ESLint
        run: yarn lint

  code-security-audit:
    name: Code Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.4.1'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run security audit
        run: yarn npm audit

  snyk:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build local Docker image
        working-directory: ${{ github.workspace }}
        run: |
          pwd
          ls
          docker build -t laa-manage-your-civil-cases ./
          docker save laa-manage-your-civil-cases -o image.tar     

      - name: Run Snyk to scan Docker image from tarball
        uses: snyk/actions/docker@master
        with:
          image: image.tar
          args: --docker --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials for ECR and Kubernetes
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
        id: login-ecr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push image with local action
        uses: ./.github/actions/build_and_push
        with:
          image_registry: ${{ secrets.ECR_REGISTRY_URL }}
          image_repo: ${{ vars.ECR_REPOSITORY }}
          dockerfile_path: Dockerfile
          image_tag: ${{ github.sha }}

  mocha-unit-tests:
    name: Mocha Unit Tests
    uses: ./.github/workflows/mocha.yml
    needs:
      - build-image
    # Only run tests when deploying to UAT
    if: success() && github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'uat' || github.event.inputs.environment == null)

  playwright:
    name: Playwright Tests
    uses: ./.github/workflows/playwright.yml
    needs:
      - build-image
    # Only run tests when deploying to UAT
    if: success() && github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'uat' || github.event.inputs.environment == null)

  deploy-uat:
    environment: uat
    runs-on: ubuntu-latest
    needs:
      - code-linting
      - code-security-audit
      - snyk
      - build-image
      - mocha-unit-tests
      - playwright

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to UAT
        uses: ./.github/actions/deploy
        with:
          app-environment: uat
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          session_secret: ${{ secrets.SESSION_SECRET }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          api_username: ${{ secrets.API_USERNAME }}
          api_password: ${{ secrets.API_PASSWORD }}
          api_client_id: ${{ secrets.API_CLIENT_ID }}
          api_client_secret: ${{ secrets.API_CLIENT_SECRET }}
  
  deploy-staging:
    environment: staging
    runs-on: ubuntu-latest
    needs: deploy-uat
    if: github.ref_name == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: ./.github/actions/deploy
        with:
          app-environment: staging
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          session_secret: ${{ secrets.SESSION_SECRET }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          api_username: ${{ secrets.API_USERNAME }}
          api_password: ${{ secrets.API_PASSWORD }}
          api_client_id: ${{ secrets.API_CLIENT_ID }}
          api_client_secret: ${{ secrets.API_CLIENT_SECRET }}

  deploy-production:
    environment: production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref_name == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: ./.github/actions/deploy
        with:
          app-environment: production
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          session_secret: ${{ secrets.SESSION_SECRET }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          api_username: ${{ secrets.API_USERNAME }}
          api_password: ${{ secrets.API_PASSWORD }}
          api_client_id: ${{ secrets.API_CLIENT_ID }}
          api_client_secret: ${{ secrets.API_CLIENT_SECRET }}
