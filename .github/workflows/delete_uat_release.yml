name: Delete UAT release

on:
  pull_request_target:
    types:
      - closed

jobs:
  delete_uat_job:
    runs-on: ubuntu-latest
    environment: uat
    # Update this to true if there is a DB and you have PVCs
    env:
      DELETE_ALL_PVC: false
    outputs:
      branch-name: ${{ steps.extract_branch.outputs.branch }}
      release-name: ${{ steps.extract_release.outputs.release }}
      delete-message: ${{ steps.delete_release.outputs.message }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Extract branch name
      id: extract_branch
      shell: bash
      env:
        BRANCH_NAME: ${{ github.head_ref || 'not_given' }}
      run: |
        if [ "$BRANCH_NAME" == "not_given" ]; then
          branch="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"
        else
          branch="$BRANCH_NAME"
        fi
        echo "branch=$branch" >> $GITHUB_OUTPUT

    - name: Extract release name
      id: extract_release
      shell: bash
      run: |
        branch=${{ steps.extract_branch.outputs.branch }}
        truncated_branch=$(echo $branch | tr '[:upper:]' '[:lower:]' | sed 's:^\w*\/::' | tr -s ' _/[]().' '-' | cut -c1-18 | sed 's/-$//')
        echo "release=$truncated_branch" >> $GITHUB_OUTPUT
  
    - name: Authenticate to the cluster
      id: authenticate_to_cluster
      uses: ministryofjustice/laa-reusable-github-actions/.github/actions/authenticate_to_cluster@d61e0cf24795b75f719a8981a4dc21e1334a1455
      with:
        kube-cert: ${{ secrets.KUBE_CERT }}
        kube-token: ${{ secrets.KUBE_TOKEN }}
        kube-cluster: ${{ secrets.KUBE_CLUSTER }}
        kube-namespace: ${{ secrets.KUBE_NAMESPACE }}

    - name: Delete UAT release
      id: delete_release
      shell: bash
      run: |
        release_name=${{ steps.extract_release.outputs.release }}
        found=$(helm list --all | grep $release_name || [[ $? == 1 ]])

        if [[ ! -z "$found" ]]
        then
          helm delete $release_name

          if [[ "${DELETE_ALL_PVC}" = "true" ]]
          then
            kubectl delete pvc -l app.kubernetes.io/instance=$release_name
          fi

          echo "message=\"Deleted UAT release ${release_name}\"" >> $GITHUB_OUTPUT
        else
          echo "message=\"UAT release, ${release_name}, not found\"" >> $GITHUB_OUTPUT
        fi

    - name: Output result
      shell: bash
      run: echo ${{ steps.delete_release.outputs.message  }}\