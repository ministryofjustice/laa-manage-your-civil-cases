{% extends "base.njk" %}

{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "components/errorSummaryComponent.njk" import errorSummary %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "x-govuk/components/autocomplete/macro.njk" import xGovukAutocomplete %}

{% block pageTitle %}{{ t(pageTitleKey, { caseReference: caseReference, serviceName: config.SERVICE_NAME }) }}
{% endblock %}

{% set backLinkHref = "/cases/" + caseReference + "/client-details" %}

{% block backLink %}
  {{ govukBackLink({
      text: t('common.back'),
      href: backLinkHref,
      classes: "govuk-!-margin-bottom-0"
    }) }}
{% endblock %}

{% block pageContent %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <h1 class="govuk-heading-l">{{ t(headingKey) }}</h1>

      {# Set up variables for the form partial #}
      {% set formAction = formActionUrl %}

      {# Include the reusable form partial #}
      {% include "case_details/client_support_needs/_form.njk" %}
    </div>
  </div>

  {# This script is used to trigger error validation for `accessible autocomplete` component, when the input filed is empty #}
  <script nonce="{{ cspNonce }}">
    document.addEventListener('DOMContentLoaded', function () {
      function clearAccessibleAutocompleteSelectionWhenInputEmpty(inputId) {
        const autocompleteInput = document.getElementById(inputId);
        const selectElement = document.getElementById(inputId + '-select');

        if (autocompleteInput && selectElement) {
          function clearSelection() {
            if (this.value.trim() === '') {
              selectElement.value = '';
              selectElement.selectedIndex = 0;
            }
          }
          autocompleteInput.addEventListener('input', clearSelection);
          autocompleteInput.addEventListener('keyup', clearSelection);
          return true;
        }
        return false;
      }

      const languageCheckbox = document.querySelector('input[value="languageSelection"]');
      if (languageCheckbox) {
        languageCheckbox.addEventListener('change', function () {
          if (this.checked) {
            setTimeout(() => clearAccessibleAutocompleteSelectionWhenInputEmpty('languageSupportNeeds'), 100);
          }
        });
      }

      clearAccessibleAutocompleteSelectionWhenInputEmpty('languageSupportNeeds');
    });
  </script>
{% endblock %}