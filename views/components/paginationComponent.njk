{#
  GOV.UK Pagination Component Wrapper

  A wrapper for the official GOV.UK pagination component that adapts our API data format.

  Features:
  - Uses official govukPagination component
  - Supports current sort order and tab state preservation
  - Accessible pagination with proper ARIA labels
  - Shows/hides based on whether pagination is needed
  - Smart page range calculation with ellipses for large page counts


  Usage:
  {% from "components/paginationComponent.njk" import paginationComponent %}

  {{ paginationComponent({
    pagination: {
      total: 100,
      page: 2,
      limit: 20
    },
    sortBy: "provider_assigned_at",
    sortOrder: "asc",
    basePath: "/cases/new"
  }) }}

  Options:
  - pagination: Pagination metadata object from API
    - total: Total number of items
    - page: Current page number (1-based)
    - limit: Items per page
  - sortBy: REQUIRED - Current sort field (e.g., "provider_assigned_at", "modified")
  - sortOrder: REQUIRED - Current sort order ("asc" or "desc")
  - basePath: REQUIRED - Base URL path for pagination links (e.g., "/cases/new")
  - classes: Additional CSS classes for the pagination container (optional)
  - maxVisiblePages: Maximum number of page links to show (default: 5)

  Note: The sortBy and sortOrder parameters must be passed from the page context to ensure 
  pagination links maintain the current sort state when users navigate between pages.
  These will be converted to the ordering parameter format (e.g., "field" or "-field").
#}

{%- from "govuk/components/pagination/macro.njk" import govukPagination -%}

{% macro paginationComponent(options) %}
  {# Convert string values to numbers for proper comparison #}
  {% set totalItems = options.pagination.total | int %}
  {% set limitItems = options.pagination.limit | int %}
  {% set currentPage = options.pagination.page | int %}

  {# Only show pagination if there are multiple pages #}
  {% if totalItems > limitItems %}
    {% set totalPages = ((totalItems + limitItems - 1) / limitItems) | int %}
    {% set maxVisiblePages = options.maxVisiblePages or 5 %}

    {# Helper function to build URL with page parameter and current sort parameters #}
    {% macro buildPageUrl(pageNumber, basePath, sortBy, sortOrder) %}
      {% set url = basePath + "?page=" + (pageNumber | string) %}
      {% if sortBy and sortOrder %}
        {% if sortOrder == 'desc' %}
          {% set url = url + "&ordering=-" + sortBy %}
        {% else %}
          {% set url = url + "&ordering=" + sortBy %}
        {% endif %}
      {% endif %}
      {{- url -}}
    {% endmacro %}

    {# Calculate visible page range #}
    {% set halfVisible = (maxVisiblePages / 2) | int %}
    {% set startPage = currentPage - halfVisible %}
    {% if startPage < 1 %}
      {% set startPage = 1 %}
    {% endif %}

    {% set endPage = startPage + maxVisiblePages - 1 %}
    {% if endPage > totalPages %}
      {% set endPage = totalPages %}
      {% set startPage = endPage - maxVisiblePages + 1 %}
      {% if startPage < 1 %}
        {% set startPage = 1 %}
      {% endif %}
    {% endif %}

    {# Build the items array for govukPagination #}
    {% set paginationItems = [] %}

    {# Add first page and ellipsis if needed #}
    {% if startPage > 1 %}
      {% set paginationItems = (paginationItems.push({number: 1, href: buildPageUrl(1, options.basePath, options.sortBy, options.sortOrder)}), paginationItems) %}

      {% if startPage > 2 %}
        {% set paginationItems = (paginationItems.push({ellipsis: true}), paginationItems) %}
      {% endif %}
    {% endif %}

    {# Add visible page range #}
    {% for pageNum in range(startPage, endPage + 1) %}
      {% if pageNum == currentPage %}
        {% set paginationItems = (paginationItems.push({number: pageNum, current: true, href: buildPageUrl(pageNum, options.basePath, options.sortBy, options.sortOrder)}), paginationItems) %}
      {% else %}
        {% set paginationItems = (paginationItems.push({number: pageNum, href: buildPageUrl(pageNum, options.basePath, options.sortBy, options.sortOrder)}), paginationItems) %}
      {% endif %}
    {% endfor %}

    {# Add ellipsis and last page if needed #}
    {% if endPage < totalPages %}
      {% if endPage < totalPages - 1 %}
        {% set paginationItems = (paginationItems.push({ellipsis: true}), paginationItems) %}
      {% endif %}

      {% set paginationItems = (paginationItems.push({number: totalPages, href: buildPageUrl(totalPages, options.basePath, options.sortBy, options.sortOrder)}), paginationItems) %}
    {% endif %}

    {# Build previous/next links #}
    {% set previousLink = false %}
    {% set nextLink = false %}

    {% if currentPage > 1 %}
      {% set previousLink = {
        href: buildPageUrl(currentPage - 1, options.basePath, options.sortBy, options.sortOrder)
      } %}
    {% endif %}

    {% if currentPage < totalPages %}
      {% set nextLink = {
        href: buildPageUrl(currentPage + 1, options.basePath, options.sortBy, options.sortOrder)
      } %}
    {% endif %}

    <div class="govuk-pagination-container">
      {# Render the official GOV.UK pagination component #}
      {{ govukPagination({
        items: paginationItems,
        previous: previousLink,
        next: nextLink,
        classes: options.classes
      }) }}

      {# Results summary - right-aligned #}
      {% set startItem = (currentPage - 1) * limitItems + 1 %}
      {% set endItem = startItem + limitItems - 1 %}
      {% if endItem > totalItems %}
        {% set endItem = totalItems %}
      {% endif %}

      <p class="govuk-body" aria-live="polite">
        Showing <strong>{{ startItem }}</strong> to <strong>{{ endItem }}</strong> of <strong>{{ totalItems }}</strong> cases
      </p>
    </div>
  </div>
{% endif %}
{% endmacro %}